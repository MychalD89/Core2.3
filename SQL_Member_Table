--Reporting Period
 Declare reporting_begin_date Date Default '2022-01-01';
 Declare reporting_end_date Date Default '2022-12-31';
 Declare prior_report_period_begin Date Default '2021-01-01';
 Declare prior_report_period_end Date Default '2021-12-31';




--Selecting all Tufts members from the tufts base member table 
with StaticMMU_Tufts_Base as (
Select distinct
payerMemberId as memberid,
patientId,
firstName,
lastname,
dateOfBirth as dob,
eligEffectiveDate as tuftsEnrollmentDate,
case when eligEndDate is null then date('2100-12-31') else eligEndDate end as tuftsDisenrollmentDate,
DATE_ADD(eligEffectiveDate, INTERVAL 90 DAY) as  tuftsEnrollmentDate_plus90,
DATE_SUB(DATE_ADD(eligEffectiveDate, INTERVAL 3 Month), INTERVAL 1 DAY) as tuftsEnrollmentDate_plus3mo,
trim(concat("Q",cast(EXTRACT(Quarter FROM DATE_SUB(DATE_ADD(eligEffectiveDate, INTERVAL 3 Month), INTERVAL 1 DAY) ) as string)," ",cast(EXTRACT(Year FROM DATE_SUB(DATE_ADD(eligEffectiveDate, INTERVAL 3 Month), INTERVAL 1 DAY) ) as string))) as Quarter
From cityblock-analytics.abs_member.abs_enterprise_member_demo_compliance
where partner = 'tufts' 
and (eligEffectiveDate <= reporting_end_date) and (eligEndDate >= reporting_end_date) 
)


--Selecting all CBH assessments from the dbt model
,assessments_staging as (
select distinct * ,
dateofHra as assessmentDate
from `cityblock-analytics.abs_client_reporting.DBT_Assessments_Model_Output_02_09_2023`
where source = 'CBH'
)

--Removing pseudo assessments
,HRA_pseudo_assessments as (
Select distinct a.*
From 
(
Select *
from assessments_staging
where source = 'CBH' and HRA_assessmentID is not null
) as a 
full join
(
select* from `cityblock-analytics.mrt_commons.questions_answers_all` 
where answerSlug = 'pseudo'
) as b
on a.HRA_assessmentID = b.assessmentid
where b.assessmentid is null
)

,Comp_pseudo_assessments as (
Select distinct a.*
From 
(
Select *
from assessments_staging
where source = 'CBH' and comp_assessmentID is not null
) as a 
full join
(
select* from `cityblock-analytics.mrt_commons.questions_answers_all` 
where answerSlug = 'pseudo'
) as b
on a.comp_assessmentID = b.assessmentid
where b.assessmentid is null
)

,MDS_pseudo_assessments as (
Select distinct a.*
From 
(
Select *
from assessments_staging
where source = 'CBH' and mds_assessmentID is not null
) as a 
full join
(
select* from `cityblock-analytics.mrt_commons.questions_answers_all` 
where answerSlug = 'pseudo'
) as b
on a.mds_assessmentID = b.assessmentid
where b.assessmentid is null
)

--Combining CBH non-pseudo assessments
, assessments as (
Select *
FROM
HRA_pseudo_assessments

UNION DISTINCT


Select *
FROM
Comp_pseudo_assessments
 
Union DISTINCT

Select *
From 
MDS_pseudo_assessments
)


--lastest assessments that occurred in the prior year reporting period
,prior_report_year_assessments as (
Select patientid, max(assessmentDate) as latest_assessment
From
assessments
Where
dateofhra between prior_report_period_begin and prior_report_period_end
Group by patientid
)


-- first assessments that occurred in the current reporting year
,current_report_year_assessments as (
Select patientid, min(assessmentDate) as first_assessment
From
assessments
Where
dateofhra between reporting_begin_date and reporting_end_date
Group by patientid
)


--Selecting members that had at least 90 days of continious enrollment in the prior reporting period
, MemberContEnroll3MoPriorReportPeriod_staging as (
Select *,
case when tuftsEnrollmentDate < prior_report_period_begin then prior_report_period_begin else tuftsEnrollmentDate end as prior_begin,
case when tuftsDisenrollmentDate > prior_report_period_end then prior_report_period_end else tuftsDisenrollmentDate end as prior_end
From StaticMMU_Tufts_Base
where tuftsEnrollmentDate <= prior_report_period_end
)


, MemberContEnroll3MoPriorReportPeriod_staging_two as (
Select *, date_diff(date_add(prior_end, interval 1 day),prior_begin,Month) as Continuous_Months
From MemberContEnroll3MoPriorReportPeriod_staging
)

, MemberContEnroll3MoPriorReportPeriod as (
Select *
FROM
MemberContEnroll3MoPriorReportPeriod_staging_two
)


--Member Table
,member_detail_table as (
Select distinct a.memberid, a.firstname, a.lastname,   format_date("%m/%d/%Y", a.dob) as dateofbirth, format_date("%m/%d/%Y",a.tuftsEnrollmentDate)  as enrollmentdate,
format_date("%m/%d/%Y",a.tuftsDisenrollmentDate) as term_date, 
case when d.Continuous_Months >= 3 then "Y" else "N" end as MemberContEnroll3MoPriorReportPeriod,
b.latest_assessment as DateLastAssessmentPriorReportPeriod,
c.first_assessment as DateFirstAssessmentReportPeriod
From 
StaticMMU_Tufts_Base as a 
left join
prior_report_year_assessments as b
on a.patientid = b.patientid
left join
current_report_year_assessments as c 
on a.patientid = c.patientid
left join
MemberContEnroll3MoPriorReportPeriod as d 
on a.patientid = d.patientid
WHERE
a.tuftsDisenrollmentDate >= reporting_end_date
)


--Element A
--Total number of members enrolled as of the last day of the current reporting period.
/*
Select count(distinct memberid)
From member_detail_table
*/

--Element B
--Total number of members who had an assessment completed during the previous reporting period.
/*
Select count(distinct memberid)
From member_detail_table
where DateLastAssessmentPriorReportPeriod is not null
*/

--Element C
--Total number of members with a reassessment completed during the current reporting period
/*
Select count(distinct memberid)
from member_detail_table
where DateLastAssessmentPriorReportPeriod is not null and DateFirstAssessmentReportPeriod is not null
*/

--Element D
--Total number of members with a reassessment completed within 365 days of the most recent assessment completed.
/*
Select count(distinct memberid)
From member_detail_table
Where date_diff(cast(DateFirstAssessmentReportPeriod as date),cast(DateLastAssessmentPriorReportPeriod as date),DAY) <= 365
*/

--Element E
--Total number of members who did not have an assessment completed during the previous reporting period.
/*
Select count(distinct memberid)
From member_detail_table
where MemberContEnroll3MoPriorReportPeriod = "Y" and DateLastAssessmentPriorReportPeriod is null
*/

--Element F
--Total number of members with an assessment completed during the current reporting period.
/*
Select count(distinct memberid)
From member_detail_table
where MemberContEnroll3MoPriorReportPeriod = "Y" and DateLastAssessmentPriorReportPeriod is null and
DateFirstAssessmentReportPeriod is not null
*/
